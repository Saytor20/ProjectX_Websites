#!/bin/bash

# Restaurant Website Generator CLI
# Version 5.0 - Modern Next.js Integration

# --- Configuration ---
PROJECT_ROOT="/Users/mohammadalmusaiteer/Project Shawrma-Website temp/Websites_nextjs"

# --- Color Definitions ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Helper Functions ---
print_color() {
    echo -e "${1}${2}${NC}"
}

print_header() {
    clear
    print_color $CYAN "üåê Restaurant Website Generator"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo
}

# --- Core CLI Functions ---

# 1. Build a Website
build_website_workflow() {
    cd "$PROJECT_ROOT" || exit 1
    print_header

    # Step 1: Select a Template
    print_color $CYAN "1. Please select a template:"
    local templates=($(ls -d templates/variants/*/ 2>/dev/null | xargs -n 1 basename))
    if [ ${#templates[@]} -eq 0 ]; then
        print_color $RED "‚ùå No templates found in templates/variants/"; return
    fi
    
    # Display templates with names from template.json if available
    for i in "${!templates[@]}"; do
        local template_id="${templates[$i]}"
        local template_json="templates/variants/$template_id/template.json"
        local display_name="$template_id"
        
        if [ -f "$template_json" ]; then
            local name=$(grep '"name"' "$template_json" | sed 's/.*"name": *"\([^"]*\)".*/\1/')
            if [ ! -z "$name" ]; then
                display_name="$name"
            fi
        fi
        
        printf "%2d) %s (%s)\n" $((i+1)) "$display_name" "$template_id"
    done
    echo
    read -p "Enter template number: " choice
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#templates[@]} ]; then
        print_color $RED "
‚ùå Invalid template selection."; return
    fi
    local selected_template="${templates[$((choice-1))]}"

    # Step 2: Select a Restaurant
    print_header
    print_color $CYAN "2. Please select a restaurant:"
    local restaurants=($(ls places_json/*.json | xargs -n 1 basename | grep -v "_processing_summary.json"))
    for i in "${!restaurants[@]}"; do
        printf "%2d) %s\n" $((i+1)) "${restaurants[$i]}"
    done
    echo
    read -p "Enter restaurant number: " choice
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#restaurants[@]} ]; then
        print_color $RED "
‚ùå Invalid restaurant selection."; return
    fi
    local selected_restaurant="${restaurants[$((choice-1))]}"

    # Step 3: Build the Website
    print_header
    print_color $YELLOW "üöÄ Starting website generation..."
    print_color $CYAN "Template: ${selected_template}"
    print_color $CYAN "Restaurant: ${selected_restaurant}"
    echo
    node "$PROJECT_ROOT/generator/website-builder.js" --template "$selected_template" --restaurant "$selected_restaurant"
    
    local exit_code=$?
    local restaurant_name=$(echo "$selected_restaurant" | sed 's/\.json$//')

    if [ $exit_code -eq 0 ]; then
        print_color $GREEN "
‚úÖ Website generation completed successfully!"
        
        # Stop any existing server on port 8080
        lsof -ti:8080 | xargs kill -9 &> /dev/null
        
        # Start the new website server
        (cd "$PROJECT_ROOT/final_websites/$restaurant_name" && python3 -m http.server 8080 &)
        
        print_color $CYAN "
üåê Your new website is now running!"
        print_color $GREEN "   Click here to view: http://localhost:8080"
        print_color $CYAN "   Website directory: $PROJECT_ROOT/final_websites/$restaurant_name"
    else
        print_color $RED "
‚ùå Website generation failed."
    fi
    echo
    read -p "Press Enter to return to the main menu..."
}

# 2. System Status
show_system_status() {
    print_header
    print_color $CYAN "üìä System Status"
    echo
    local template_count=$(ls -d templates/variants/*/ 2>/dev/null | wc -l)
    local restaurant_count=$(ls places_json/*.json 2>/dev/null | wc -l)
    local website_count=$(ls final_websites/ 2>/dev/null | wc -l)
    
    echo "- Template Variants: $template_count"
    echo "- Restaurant Data Files: $restaurant_count"
    echo "- Generated Websites: $website_count"
    echo "- Shared Components: $(ls templates/_shared/src/components/ 2>/dev/null | wc -l)"
    echo
    print_color $YELLOW "Available Template Variants:"
    for template_dir in $(ls -d templates/variants/*/ 2>/dev/null); do
        local template_id=$(basename "$template_dir")
        local template_json="$template_dir/template.json"
        local display_name="$template_id"
        
        if [ -f "$template_json" ]; then
            local name=$(grep '"name"' "$template_json" | sed 's/.*"name": *"\([^"]*\)".*/\1/')
            if [ ! -z "$name" ]; then
                display_name="$name"
            fi
        fi
        
        echo "  ‚Ä¢ $display_name ($template_id)"
    done
    echo
    read -p "Press Enter to return to the main menu..."
}

# 3. View Generated Websites
view_generated_websites() {
    print_header
    print_color $CYAN "üìÅ Generated Websites"
    echo
    
    local websites=($(ls final_websites/ | grep -v "_generation_summary.json"))
    if [ ${#websites[@]} -eq 0 ]; then
        print_color $YELLOW "No websites have been generated yet."
        echo
        read -p "Press Enter to return to the main menu..."
        return
    fi
    
    for i in "${!websites[@]}"; do
        printf "%2d) %s\n" $((i+1)) "${websites[$i]}"
    done
    echo
    read -p "Enter website number to view (or press Enter to go back): " choice
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#websites[@]} ]; then
        local selected_website="${websites[$((choice-1))]}"
        
        # Stop any existing server
        lsof -ti:8080 | xargs kill -9 &> /dev/null
        
        # Start server for selected website
        (cd "$PROJECT_ROOT/final_websites/$selected_website" && python3 -m http.server 8080 &)
        
        print_color $GREEN "
üåê Website is now running at: http://localhost:8080"
        print_color $CYAN "Website: $selected_website"
        echo
        read -p "Press Enter to stop the server and return to menu..."
        
        # Stop the server
        lsof -ti:8080 | xargs kill -9 &> /dev/null
    fi
}

# 4. Clone a Website
clone_website_workflow() {
    print_header
    print_color $CYAN "Cloning a Website"
    echo
    read -p "Enter the URL to clone: " url

    if [ -z "$url" ]; then
        print_color $RED "
‚ùå URL cannot be empty."; return
    fi

    echo
    print_color $CYAN "Select a cloning tool:"
    echo "1) httrack (recommended)"
    echo "2) wget"
    echo
    read -p "Enter your choice [1-2]: " tool_choice

    local tool="httrack"
    if [ "$tool_choice" == "2" ]; then
        tool="wget"
    fi

    print_header
    print_color $YELLOW "üöÄ Starting website cloning..."
    print_color $CYAN "URL: ${url}"
    print_color $CYAN "Tool: ${tool}"
    echo
    node "$PROJECT_ROOT/generator/website-builder.js" --clone "$url" --tool "$tool"
    
    local exit_code=$?

    if [ $exit_code -eq 0 ]; then
        print_color $GREEN "
‚úÖ Website cloning completed successfully!"
    else
        print_color $RED "
‚ùå Website cloning failed."
    fi
    echo
    read -p "Press Enter to return to the main menu..."
}

# --- Main Menu --- 
main_menu() {
    while true; do
        print_header
        print_color $YELLOW "Please choose an option:"
        echo "1) Build a Website"
        echo "2) Clone a Website"
        echo "3) System Status"
        echo "4) View Generated Websites"
        echo "5) Exit"
        echo
        read -p "Enter your choice [1-5]: " choice

        case $choice in
            1) build_website_workflow ;;
            2) clone_website_workflow ;;
            3) show_system_status ;;
            4) view_generated_websites ;;
            5) exit 0 ;;
            *) print_color $RED "Invalid choice. Please try again." && sleep 2 ;;
        esac
    done
}

# --- Entry Point ---
main_menu

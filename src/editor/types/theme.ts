// Phase 3: Theme System Type Definitions
export interface ThemeMetadata {
  id: string;
  name: string;
  description: string;
  category: 'modern' | 'classic' | 'minimal' | 'premium' | 'elegant' | 'bold';
  author?: string;
  version: string;
  features: string[];
  tags: string[];
  previewImages: {
    thumbnail: string;
    hero?: string;
    mobile?: string;
  };
  isCustom?: boolean;
  baseTheme?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface ThemeCustomization {
  id: string;
  themeId: string;
  name: string;
  description?: string;
  customTokens: Record<string, any>;
  componentSettings: ComponentCustomization[];
  responsiveSettings: ResponsiveCustomization;
  createdAt: string;
  updatedAt: string;
}

export interface ComponentCustomization {
  componentId: string;
  visibility: boolean;
  customStyles: Record<string, string>;
  customProps: Record<string, any>;
}

export interface ResponsiveCustomization {
  mobile: {
    hidden: string[];
    styles: Record<string, Record<string, string>>;
  };
  tablet: {
    hidden: string[];
    styles: Record<string, Record<string, string>>;
  };
  desktop: {
    hidden: string[];
    styles: Record<string, Record<string, string>>;
  };
}

export interface ThemeChange {
  type: 'switch' | 'customize' | 'reset';
  themeId: string;
  previousTheme?: string;
  customizations?: Partial<ThemeCustomization>;
  timestamp: number;
}

export interface TokenUpdate {
  category: string;
  key: string;
  value: any;
  previousValue?: any;
  timestamp: number;
}

export interface ThemePreviewConfig {
  themeId: string;
  customizations?: Partial<ThemeCustomization>;
  restaurant: {
    id: string;
    name: string;
    data: any;
  };
  viewport: 'mobile' | 'tablet' | 'desktop';
  sections?: string[];
}

export interface ThemeExportData {
  metadata: ThemeMetadata;
  tokens: Record<string, any>;
  customizations?: ThemeCustomization;
  version: string;
  exportedAt: string;
}

export interface ThemeImportResult {
  success: boolean;
  theme?: ThemeMetadata;
  errors?: string[];
  warnings?: string[];
}

export interface DarkModeVariant {
  baseThemeId: string;
  darkThemeId: string;
  autoGenerated: boolean;
  contrastRatio: number;
  adjustments: {
    colors: Record<string, string>;
    backgrounds: Record<string, string>;
    shadows: Record<string, string>;
  };
}

export interface ThemeValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  performance: {
    cssSize: number;
    jsSize: number;
    budgetCompliant: boolean;
  };
}

export interface ValidationError {
  type: 'token' | 'css' | 'performance' | 'structure';
  message: string;
  path?: string;
  severity: 'error' | 'warning';
}

export interface ValidationWarning {
  type: 'compatibility' | 'accessibility' | 'performance' | 'best-practice';
  message: string;
  suggestion?: string;
}

export interface ThemeGalleryItem {
  metadata: ThemeMetadata;
  preview: {
    thumbnailUrl: string;
    heroImageUrl?: string;
    mobilePreviewUrl?: string;
  };
  isActive: boolean;
  isCustomized: boolean;
  customizations?: ThemeCustomization;
}

export interface ThemeSearchFilters {
  categories: string[];
  tags: string[];
  features: string[];
  searchQuery: string;
  sortBy: 'name' | 'created' | 'updated' | 'popularity';
  sortOrder: 'asc' | 'desc';
}

export interface ThemeCustomizerState {
  isOpen: boolean;
  activeTab: 'colors' | 'typography' | 'spacing' | 'components' | 'responsive';
  selectedComponent?: string;
  selectedDevice: 'mobile' | 'tablet' | 'desktop';
  previewMode: boolean;
  hasUnsavedChanges: boolean;
  history: ThemeCustomizationHistory[];
  currentHistoryIndex: number;
}

export interface ThemeCustomizationHistory {
  id: string;
  action: string;
  timestamp: number;
  changes: Record<string, any>;
  description: string;
}

// Theme actions for editor context
export interface ThemeAction {
  type: 'SET_THEME' | 'UPDATE_THEME_TOKENS' | 'RESET_THEME' | 
        'START_THEME_CUSTOMIZATION' | 'END_THEME_CUSTOMIZATION' |
        'TOGGLE_DARK_MODE' | 'SET_RESPONSIVE_PREVIEW' |
        'SAVE_CUSTOM_THEME' | 'DELETE_CUSTOM_THEME' |
        'EXPORT_THEME' | 'IMPORT_THEME';
  payload: any;
  timestamp: number;
}

export interface ThemeState {
  currentTheme: string;
  availableThemes: ThemeMetadata[];
  customThemes: ThemeMetadata[];
  isCustomizing: boolean;
  customTokens: Record<string, any>;
  previewMode: boolean;
  isDarkMode: boolean;
  responsivePreview: 'mobile' | 'tablet' | 'desktop';
  activeCustomization?: ThemeCustomization;
  searchFilters: ThemeSearchFilters;
  customizerState: ThemeCustomizerState;
  darkModeVariants: DarkModeVariant[];
}